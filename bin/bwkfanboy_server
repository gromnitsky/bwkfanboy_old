#!/usr/bin/env ruby
# -*-ruby-*-

require 'shellwords'
require 'webrick'
require 'date'
require_relative '../lib/bwkfanboy/utils'

Encoding.default_external = 'UTF-8'

$conf = {
  addr: '127.0.0.1',
  port: 9042,
  converter: "./#{Bwkfanboy::Meta::NAME}",
  banner: "Usage: #{File.basename($0)} [options]",
  server_type: WEBrick::SimpleServer,
  workdir: File.dirname(File.expand_path($0)),
  pidfile: "#{Bwkfanboy::Meta::DIR_TMP}/#{File.basename($0)}.pid",
  log: "#{Bwkfanboy::Meta::DIR_LOG}/#{File.basename($0)}.log",
  alog: "#{Bwkfanboy::Meta::DIR_LOG}/#{File.basename($0)}-access.log",
  mode: 'pipe'
}

o = Bwkfanboy::Utils.cl_parse(ARGV, $conf[:banner]) # create OptionParser object
o.on('-b VAL', 'BindAddress') { |i| $conf[:addr] = i }
o.on('-p VAL', 'A port number') { |i| $conf[:port] = i }
o.on('-c VAL', "A path to main #{Bwkfanboy::Meta::NAME} executable") { |i| $conf[:converter] = i }
o.on('-d', 'Detach from a terminal') {|i| $conf[:server_type] = WEBrick::Daemon }
o.on('-D', '(ignore this) Use URI_DEBUG const instead URI in plugins') { |i| $conf[:mode] = 'debug' }
Bwkfanboy::Utils.cl_parse(ARGV, $conf[:banner], o) # run cl parser

Bwkfanboy::Utils.dir_tmp_create()

class FeedServlet < WEBrick::HTTPServlet::AbstractServlet # :nodoc: all
  def do_GET(req, res)
    if req.query['p'] && req.query['p'] =~ Bwkfanboy::Meta::PLUGIN_NAME
      res['Content-Type'] = 'application/atom+xml; charset=UTF-8'
      res['Content-Disposition'] = "inline; filename=\"#{Bwkfanboy::Meta::NAME}-#{req.query['p']}.xml"

      # possible options for the plugin
      if req.query['o'] && req.query['o'] !~ Bwkfanboy::Meta::PLUGIN_OPTS
        raise WEBrick::HTTPStatus::InternalServerError.new("'o' is too harsh")
      end
      
      cmd = "#{$conf[:converter]} #{$conf[:mode] == 'debug' ? '-D' : ''} '#{req.query['p']}' #{req.query['o']}"
      r = Bwkfanboy::Utils.cmd_run(cmd)
      if r[0] != 0 then
        raise WEBrick::HTTPStatus::InternalServerError.new("Errors in the pipeline:\n\n #{r[1]}")
      end

      res.body = r[2]
      
      # search for <updated> tag and set Last-Modified header
      if (m = r[2].match('<updated>(.+?)</updated>'))
        res['Last-Modified'] = DateTime.parse(m.to_s).httpdate
      end
      
    else
      raise WEBrick::HTTPStatus::InternalServerError.new("Parameter 'p' required")
    end
  end
end

class FeedListServlet < WEBrick::HTTPServlet::AbstractServlet # :nodoc: all
  def do_GET(req, res)
      cmd = "#{$conf[:converter]} -l"
      r = Bwkfanboy::Utils.cmd_run(cmd)
      if r[0] != 0 then
        raise WEBrick::HTTPStatus::InternalServerError.new("Errors:\n\n #{r[1]}")
      end
      
      res.body = r[2]
  end
end

# create temporally files
def start_callback()
  Dir.chdir($conf[:workdir])
  if ! File.executable?($conf[:converter]) then
    Bwkfanboy::Utils.errx(1, "Missing executable file '#{$conf[:converter]}'")
  end
  
  begin
    File.open($conf[:pidfile], "w+") {|i| i.puts $$ }
  rescue
    Bwkfanboy::Utils.warnx("unable to create a pidfile " + $conf[:pidfile])
  end
end

# remove temporally files
def stop_callback()
  begin
    File.unlink $conf[:pidfile]
  rescue
    # ignore errors
  end
end

def log_create(f)
  begin
    log = Logger.new(f, 2, Bwkfanboy::Meta::LOG_MAXSIZE)
  rescue
    Bwkfanboy::Utils.warnx("cannot open log #{f}");
    return nil
  end
  log.datetime_format = "%H:%M:%S"
  log
end


###

server_log = log_create($conf[:log])
access_log = [[ log_create($conf[:alog]), WEBrick::AccessLog::COMBINED_LOG_FORMAT ]]

begin
  s = WEBrick::HTTPServer.new(Port: $conf[:port],
                              BindAddress: $conf[:addr],
                              ServerType: $conf[:server_type],
                              StartCallback: -> {start_callback},
                              StopCallback: -> {stop_callback},
                              Logger: server_log,
                              AccessLog: access_log)
rescue Errno::EADDRINUSE
  Bwkfanboy::Utils.warnx "already loaded"
  exit 1
rescue
  Bwkfanboy::Utils.errx 1, $!.to_s
end

s.mount("/", FeedServlet)
s.mount("/list", FeedListServlet)
['TERM', 'INT'].each {|i|
  trap(i) { s.shutdown }
}
s.start
