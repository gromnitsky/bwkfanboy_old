#!/usr/bin/env ruby
# -*-ruby-*-

# Read stdin for JSON, generate from it an Atom feed and print the
# result to stdout in UTF-8.
#
# One can validate the JSON by providing '--check' command line option
# (by default the validating is off).

require 'rss/maker'
require 'date'
require 'json'
require 'jsonschema'

require_relative '../lib/bwkfanboy/utils'

$conf = {
  banner: "Usage: #{File.basename($0)} [options] < json",
  check: false
}

# we are expection the input ONLY in UTF-8
Encoding.default_external = 'UTF-8'

o = Bwkfanboy::Utils.cl_parse(ARGV, $conf[:banner])
o.on('--check', 'Validate the input (slow!)') { |i| $conf[:check] = true }
Bwkfanboy::Utils.cl_parse(ARGV, $conf[:banner], o) # run cl parser

begin
  j = JSON.parse(STDIN.read)
rescue
  Bwkfanboy::Utils.errx(1, "stdin had invalid JSON");
end

# validate the input
schema = Bwkfanboy::Utils.gem_dir_system() + '/schema.js'
if $conf[:check] then
  begin
    JSON::Schema.validate(j, JSON.parse(File.read(schema)))
  rescue
    Bwkfanboy::Utils.errx(1, "JSON validation with schema (#{schema}) failed");
  end
end

feed = RSS::Maker.make("atom") { |maker|
  maker.channel.id = j['channel']['id']
  maker.channel.updated = j['channel']['updated']
  maker.channel.author = j['channel']['author']
  maker.channel.title = j['channel']['title']
  
  maker.channel.links.new_link {|i|
    i.href = j['channel']['link']
    i.rel = 'alternate'
    i.type = 'text/html' # eh
  }

  maker.items.do_sort = true

  j['x_entries'].each { |i|
    maker.items.new_item do |item|
      item.links.new_link {|k|
        k.href = i['link']
        k.rel = 'alternate'
        k.type = 'text/html' # only to make happy crappy pr2nntp gateway
      }
      item.title = i['title']
      item.author = i['author']
      item.updated = i['updated']
      item.content.type = j['channel']['x_entries_content_type']
      
      case item.content.type
      when 'text'
        item.content.content = i['content']
      when 'html'
        item.content.content = i['content']
      else
        item.content.xhtml = i['content']
      end
    end
  }
}

puts feed
