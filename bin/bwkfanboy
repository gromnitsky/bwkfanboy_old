#!/usr/bin/env ruby
# -*-ruby-*-

# This program is executed by bin/bwkfanboy_server to do all dirty work:
# fetch HTML, parse it and generate a pretty Atom feed.
#
# It is a wrapper which you can utilize for such common tasks as listing
# all available plugins.
#
# Type:
#
#   % bwkfanboy -h
#
# to get some basic help--read about Bwkfanboy module.

require 'shellwords'
require_relative '../lib/bwkfanboy/parser'

$conf = {
  mode: 'fast',
  skeleton_name: 'bwkfanboy_plugin_skeleton.rb',
  skeleton: Bwkfanboy::Utils.gem_dir_system() + '/plugin_skeleton.erb',
  debug: false,
  banner: "Usage: #{File.basename($0)} [options] plugin-name"
}

class Plugin # :nodoc: all
  attr_reader :name, :path
  
  def initialize(name)
    @name = name
    @path = nil
  end

  def dirs()
    # try to create user's home plugin directory
    begin
      ['~/.bwkfanboy', '~/.bwkfanboy/plugins'].each {|i|
        Dir.mkdir(File.expand_path(i))
      }
    rescue
      # empty
    end
    
    r = []
    dirs = ['~/.bwkfanboy/plugins', "#{Bwkfanboy::Utils.gem_dir_system}/plugins"]
    begin
      # this will fail for user's home directory under Apache CGI
      # environment
      dirs.map! {|i| File.expand_path(i) }
    rescue
    end
    dirs.each {|i|
      if File.readable?(i) then
        r << i
      else
        Bwkfanboy::Utils.warnx("directory #{i} isn't readable");
      end
    }

    if r.length == 0 then
      Bwkfanboy::Utils.errx(1, "no dirs for plugins found: #{dirs.join(' ')}")
    end
    return r
  end

  def load(opt)
    abort($conf[:banner]) unless (@name && @name !~ /^\s*$/)

    dirs.each {|i|
      files = Dir.glob("#{i}/*.rb")
      if (@path = files.index("#{i}/#{@name}.rb")) then
        @path = files[@path]
        break
      end
    }
    Bwkfanboy::Utils.errx(1, "no such plugin '#{@name}'") if ! @path
    Bwkfanboy::Utils.plugin_load(@path, Bwkfanboy::Meta::PLUGIN_CLASS)
    
    pn = Page.new(opt)
    pn.check()
    return pn
  end
  
end # class
  
# ----------------------------------------------------------------------

o = Bwkfanboy::Utils.cl_parse(ARGV, $conf[:banner]) # create OptionParser object
o.on('-i', 'Show some info about the plugin') { |i| $conf[:mode] = 'info' }
o.on('-l', 'List all plugins') { |i| $conf[:mode] = 'list' }
o.on('-p', 'List all plugins paths') { |i| $conf[:mode] = 'path' }
o.on('-t FILE', 'Write to the FILE a skeleton for a plugin') { |i|
  $conf[:mode] = 'template'
  $conf[:skeleton_name] = i if i !~ /^\s*$/
}
o.on('-O', '(ignore this) Execute all bwkfanboy_* utils in a pipe') { |i| $conf[:mode] = 'pipe' }
o.on('-D', '(ignore this) Use URI_DEBUG const instead URI in plugins') { |i| $conf[:debug] = true }
Bwkfanboy::Utils.cl_parse(ARGV, $conf[:banner], o) # run cl parser

plugin = Plugin.new(ARGV[0])
opt = Bwkfanboy::Utils.plugin_opts(ARGV)

case $conf[:mode]
when 'template'
  require 'erb'
  require 'digest/md5'
  require 'etc'

  t = ERB.new(File.read($conf[:skeleton]))
  t.filename = $conf[:skeleton] # to report errors relative to this file
  begin
    md5_system = Digest::MD5.hexdigest(t.result(binding))
  rescue Exception
    Bwkfanboy::Utils.errx(1, "cannot read the template: #{$!}")
  end

  if ! File.exists?($conf[:skeleton_name])
    # write a skeleton
    begin
      File.open($conf[:skeleton_name], 'w+') { |fp| fp.puts t.result(binding) }
    rescue
      Bwkfanboy::Utils.errx(1, "cannot write the skeleton: #{$!}")
    end
  elsif
    # warn a careless user
    if md5_system != Digest::MD5.file($conf[:skeleton_name]).hexdigest
      Bwkfanboy::Utils.errx(1, "#{$conf[:skeleton_name]} already exists")
    end
  end
  
when 'list'
  plugin.dirs().each {|i|
    puts "#{i}:"
    Dir.glob("#{i}/*.rb").each {|j|
      puts "\t#{File.basename(j, '.rb')}"
    }
  }
when 'path'
  plugin.dirs().each {|i| puts i}
when 'info'
  plugin.load(opt).dump_info
when 'version'
  puts Bwkfanboy::Meta::VERSION
when 'pipe'
  pn = plugin.load(opt)
  cmd = "./bwkfanboy_fetch | ./bwkfanboy_parse '#{plugin.path}' #{opt.size != 0 ? Shellwords.join(opt) : ''} | ./bwkfanboy_generate"
  if Bwkfanboy::Utils.cfg[:verbose] >= 2 then
    puts (!$conf[:debug] ? pn.uri() : pn.class::Meta::URI_DEBUG)
    puts cmd
    exit 0
  end

  # go to the directory with current script
  Dir.chdir(File.dirname(File.expand_path($0)))
  
  pipe = IO.popen(cmd, 'w+')
  pipe.puts (!$conf[:debug] ? pn.uri : pn.class::Meta::URI_DEBUG)
  pipe.close_write
  while line = pipe.gets
    puts line
  end
  pipe.close
  
else
  # a 'new', faster way
  pn = plugin.load(opt)

  require_relative '../lib/bwkfanboy/fetch'
  require_relative '../lib/bwkfanboy/generate'

  # 1. fetch & parse
  pn = Page.new(opt)
  Bwkfanboy::Fetch.cat(!$conf[:debug] ? pn.uri() : pn.class::Meta::URI_DEBUG) {|stream|
    pn.parse(stream)
  }
  
  if Bwkfanboy::Utils.cfg[:verbose] >= 2 then
    pn.dump()
    exit 0
  end
  
  # 2.generate
  puts Bwkfanboy::Generate.atom(JSON.parse(pn.to_json))
end
